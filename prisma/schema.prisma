// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String               @id @default(cuid())
    name          String?
    email         String?              @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    organizations OrganizationMember[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model OrganizationMember {
    organizationId         String
    userId                 String
    organization           Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    user                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    role                   MemberRole
    createdJoinCodes       JoinCode[]
    meetings               MeetingParticipant[]
    attributes             MemberAttribute[]
    issuedAttendanceLinks  AttendanceLink[]
    issuedAttributeLinks   AttributeLink[]
    redeemedAttributeLinks AttributeLinkRedeem[]

    @@id([organizationId, userId])
}

model JoinCode {
    id     String             @id @default(cuid())
    code   String             @unique
    issuer OrganizationMember @relation(fields: [organizationMemberOrganizationId, organizationMemberUserId], references: [organizationId, userId])
    uses   Int                @default(0)
    role   MemberRole

    organization                     Organization @relation(fields: [organizationId], references: [id])
    organizationId                   String
    organizationMemberOrganizationId String
    organizationMemberUserId         String
}

model AttendanceLink {
    id                               String                 @id @default(cuid())
    code                             String
    action                           AttendanceLinkAction
    meeting                          Meeting                @relation(fields: [meetingId], references: [id])
    meetingId                        String
    issuer                           OrganizationMember     @relation(fields: [organizationMemberOrganizationId, organizationMemberUserId], references: [organizationId, userId])
    organizationMemberOrganizationId String
    organizationMemberUserId         String
    redeemedBy                       AttendanceLinkRedeem[]

    @@unique([meetingId, code])
}

model AttendanceLinkRedeem {
    link                                   AttendanceLink     @relation(fields: [linkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    linkId                                 String
    participant                            MeetingParticipant @relation(fields: [meetingParticipantMeetingId, meetingParticipantMemberOrganizationId, meetingParticipantMemberUserId], references: [meetingId, memberOrganizationId, memberUserId], onDelete: Cascade, onUpdate: Cascade)
    meetingParticipantMeetingId            String
    meetingParticipantMemberOrganizationId String
    meetingParticipantMemberUserId         String

    redeemedAt DateTime @default(now())

    @@id([linkId, meetingParticipantMeetingId, meetingParticipantMemberOrganizationId, meetingParticipantMemberUserId])
}

model OrganizationAttribute {
    name             String
    organization     Organization      @relation(fields: [organizationId], references: [id])
    organizationId   String
    rewards          MeetingReward[]
    memberAttributes MemberAttribute[]
    links            AttributeLink[]

    @@unique([name, organizationId])
}

model MemberAttribute {
    id                        String                @id @default(cuid())
    attribute                 OrganizationAttribute @relation(fields: [organizationAttributeName, orgId], references: [name, organizationId], onDelete: Cascade, onUpdate: Cascade)
    value                     Int
    organizationAttributeName String
    orgMember                 OrganizationMember    @relation(fields: [orgId, userId], references: [organizationId, userId], onDelete: Cascade, onUpdate: Cascade)
    orgId                     String
    userId                    String

    @@unique([organizationAttributeName, orgId, userId])
}

model AttributeLink {
    id                        String                  @id @default(cuid())
    organizationAttribute     OrganizationAttribute   @relation(fields: [organizationAttributeName, orgId], references: [name, organizationId])
    organizationAttributeName String
    orgId                     String
    code                      String
    value                     Int
    name                      String
    action                    AttributeModifierAction
    issuer                    OrganizationMember      @relation(fields: [orgId, organizationMemberUserId], references: [organizationId, userId])
    organizationMemberUserId  String
    redeemedBy                AttributeLinkRedeem[]

    @@unique([organizationAttributeName, orgId, code])
}

model AttributeLinkRedeem {
    link                 AttributeLink      @relation(fields: [linkId], references: [id])
    linkId               String
    member               OrganizationMember @relation(fields: [memberOrganizationId, memberUserId], references: [organizationId, userId])
    memberOrganizationId String
    memberUserId         String

    redeemedAt DateTime @default(now())

    @@id([linkId, memberOrganizationId, memberUserId])
}

model MeetingParticipant {
    status               MeetingParticipantStatus
    code                 String
    meetingId            String
    memberOrganizationId String
    memberUserId         String
    member               OrganizationMember       @relation(fields: [memberOrganizationId, memberUserId], references: [organizationId, userId], onDelete: Cascade, onUpdate: Cascade)
    meeting              Meeting                  @relation(fields: [meetingId], references: [id])

    checkedIn     Boolean                @default(false)
    checkedOut    Boolean                @default(false)
    checkInTime   DateTime?
    checkOutTime  DateTime?
    redeemedLinks AttendanceLinkRedeem[]

    @@id([meetingId, memberOrganizationId, memberUserId])
    @@unique([meetingId, code])
}

model MeetingReward {
    id             String                  @id @default(cuid())
    value          Float
    action         AttributeModifierAction
    meeting        Meeting                 @relation(fields: [meetingId], references: [id])
    meetingId      String
    attribute      OrganizationAttribute   @relation(fields: [attributeName, attributeOrgId], references: [name, organizationId], onDelete: Cascade, onUpdate: Cascade)
    attributeName  String
    attributeOrgId String
}

model Meeting {
    id               String               @id @default(cuid())
    name             String
    slug             String
    startTime        DateTime
    endTime          DateTime?
    location         String?
    organizationSlug String
    rewardsEnabled   Boolean              @default(false)
    isPublic         Boolean              @default(false)
    participants     MeetingParticipant[]
    rewards          MeetingReward[]
    organization     Organization         @relation(fields: [organizationSlug], references: [slug])

    // for public meetings
    limitParticipants Boolean @default(false)
    maxParticipants   Int?

    requireCheckIn  Boolean          @default(false)
    requireCheckOut Boolean          @default(false)
    attendanceLinks AttendanceLink[]

    @@unique([organizationSlug, slug])
}

model Organization {
    id   String @id @default(cuid())
    name String
    slug String @unique

    members    OrganizationMember[]
    joinCodes  JoinCode[]
    meetings   Meeting[]
    attributes OrganizationAttribute[]
}

enum MeetingParticipantStatus {
    REGISTERED
    ATTENDED
}

enum AttributeModifierAction {
    INCREMENT
    DECREMENT
    SET
}

enum MemberRole {
    ADMIN
    MEMBER
}

enum AttendanceLinkAction {
    CHECKIN
    CHECKOUT
}
